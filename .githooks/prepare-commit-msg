#!/usr/bin/env bash
set -euo pipefail

# Git passes: $1 = commit message file, $2 = source (optional), $3 = sha (optional)
msg_file="$1"
source_type="${2-}"

# Resolve repo root early for venv detection
repo_root="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"

# Skip only for merge/squash (let template/message go through if empty or 'update')
case "$source_type" in
  merge|squash) exit 0;;
esac

# If message already non-empty and not just 'update', keep user's content
if [ -s "$msg_file" ]; then
  if grep -qiE '^[[:space:]]*update[[:space:]]*$' "$msg_file"; then
    : # will overwrite
  else
    exit 0
  fi
fi

# Select python interpreter (prefer project venv)
if [ -x "$repo_root/.venv/Scripts/python.exe" ]; then
  PY="$repo_root/.venv/Scripts/python.exe"
elif [ -x "$repo_root/.venv/bin/python3" ]; then
  PY="$repo_root/.venv/bin/python3"
elif [ -x "$repo_root/.venv/bin/python" ]; then
  PY="$repo_root/.venv/bin/python"
elif command -v python3 >/dev/null 2>&1; then
  PY=python3
elif command -v python >/dev/null 2>&1; then
  PY=python
else
  # Minimal shell fallback when Python is unavailable
  stat="$(git diff --staged --name-status || true)"
  if [ -n "${stat//[[:space:]]/}" ]; then
    top3="$(printf '%s\n' "$stat" | awk '{print $NF}' | head -n 3 | paste -sd ', ' -)"
    {
      printf '%s\n' "chore: update"
      [ -n "$top3" ] && printf -- '- sample: %s\n' "$top3"
    } > "$msg_file"
  else
    printf '%s\n' "chore: update (no staged changes)" > "$msg_file"
  fi
  exit 0
fi

cd "$repo_root"

# Enforce UTF-8 locale to avoid mojibake on Windows terminals
export PYTHONUTF8=1
export PYTHONIOENCODING=UTF-8
export LC_ALL=${LC_ALL:-C.UTF-8}
export LANG=${LANG:-C.UTF-8}
export LESSCHARSET=utf-8

# Use AI only if API key exists; script has fallback otherwise
export GEMINI_API_KEY="${GEMINI_API_KEY-}"
export GOOGLE_API_KEY="${GOOGLE_API_KEY-}"

gen_out="$("$PY" scripts/gen_commit_msg_googleai.py 2>/dev/null || true)"
if [ -n "${gen_out//[[:space:]]/}" ]; then
  printf '%s\n' "$gen_out" > "$msg_file"
fi

exit 0
