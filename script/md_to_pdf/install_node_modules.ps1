# SPDX-License-Identifier: GPL-3.0-only
# Copyright (C) 2025 GaoZheng

[CmdletBinding()]
param(
    [switch]$ForceClean
)

$ErrorActionPreference = 'Stop'

try {
    $scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
    Set-Location -LiteralPath $scriptDir
} catch {
    Write-Error "无法切换到脚本目录：$($_.Exception.Message)"
    exit 1
}

# 检测 Node.js 是否可用
try {
    $nodeVersion = & node -v 2>$null
    if (-not $nodeVersion) { throw 'node not found' }
    Write-Host ("检测到 Node.js 版本: {0}" -f $nodeVersion) -ForegroundColor Green
} catch {
    Write-Error "未检测到 Node.js，请先安装 Node.js 并确保 `node` 在 PATH 中。"
    exit 1
}

if ($ForceClean -and (Test-Path -LiteralPath 'node_modules')) {
    Write-Host '移除现有 node_modules（ForceClean）...' -ForegroundColor Yellow
    Remove-Item -LiteralPath 'node_modules' -Recurse -Force -ErrorAction Stop
}

$useCi = Test-Path -LiteralPath 'package-lock.json'
$npmArgs = @('--no-fund','--no-audit')
$cmd = if ($useCi) { 'ci' } else { 'install' }
Write-Host ("在 `script/md_to_pdf` 执行: npm {0} {1}" -f $cmd, ($npmArgs -join ' ')) -ForegroundColor Cyan

& npm $cmd @npmArgs
$exit = $LASTEXITCODE
if ($exit -ne 0) {
    Write-Error ("npm {0} 执行失败，退出码：{1}" -f $cmd, $exit)
    exit $exit
}

Write-Host 'node_modules 安装完成。' -ForegroundColor Green

